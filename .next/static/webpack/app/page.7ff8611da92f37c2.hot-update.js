"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/FlappyBirdGame.tsx":
/*!*******************************************!*\
  !*** ./src/components/FlappyBirdGame.tsx ***!
  \*******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ FlappyBirdGame; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\nconst BASE_WIDTH = 400;\nconst BASE_HEIGHT = 600;\nconst BIRD_SIZE = 20;\nconst PIPE_WIDTH = 60;\nconst PIPE_GAP = 200;\nconst GRAVITY = 0.3;\nconst JUMP_FORCE = -10;\nconst PIPE_SPEED = 1;\nfunction FlappyBirdGame() {\n    _s();\n    const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const animationRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    const [canvasSize, setCanvasSize] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        width: BASE_WIDTH,\n        height: BASE_HEIGHT\n    });\n    const [scale, setScale] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const updateCanvasSize = ()=>{\n            if (true) {\n                const screenWidth = window.innerWidth;\n                const screenHeight = window.innerHeight;\n                // Calculate scale to fit screen while maintaining aspect ratio\n                const scaleX = (screenWidth - 40) / BASE_WIDTH // 40px padding\n                ;\n                const scaleY = (screenHeight - 100) / BASE_HEIGHT // 100px for UI elements\n                ;\n                const newScale = Math.min(scaleX, scaleY, 1.2) // Max scale of 1.2\n                ;\n                const width = BASE_WIDTH * newScale;\n                const height = BASE_HEIGHT * newScale;\n                setCanvasSize({\n                    width,\n                    height\n                });\n                setScale(newScale);\n            }\n        };\n        updateCanvasSize();\n        window.addEventListener(\"resize\", updateCanvasSize);\n        window.addEventListener(\"orientationchange\", updateCanvasSize);\n        return ()=>{\n            window.removeEventListener(\"resize\", updateCanvasSize);\n            window.removeEventListener(\"orientationchange\", updateCanvasSize);\n        };\n    }, []);\n    const [gameState, setGameState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        bird: {\n            x: BASE_WIDTH / 4,\n            y: BASE_HEIGHT / 2,\n            velocity: 0,\n            radius: BIRD_SIZE / 2\n        },\n        pipes: [],\n        score: 0,\n        gameStarted: false,\n        gameOver: false,\n        explosion: {\n            active: false,\n            x: 0,\n            y: 0,\n            frame: 0\n        }\n    });\n    const resetGame = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        setGameState({\n            bird: {\n                x: BASE_WIDTH / 4,\n                y: BASE_HEIGHT / 2,\n                velocity: 0,\n                radius: BIRD_SIZE / 2\n            },\n            pipes: [],\n            score: 0,\n            gameStarted: false,\n            gameOver: false,\n            explosion: {\n                active: false,\n                x: 0,\n                y: 0,\n                frame: 0\n            }\n        });\n    }, []);\n    const jump = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (!gameState.gameStarted && !gameState.gameOver) {\n            setGameState((prev)=>({\n                    ...prev,\n                    gameStarted: true,\n                    bird: {\n                        ...prev.bird,\n                        velocity: JUMP_FORCE\n                    }\n                }));\n        } else if (gameState.gameStarted && !gameState.gameOver) {\n            setGameState((prev)=>({\n                    ...prev,\n                    bird: {\n                        ...prev.bird,\n                        velocity: JUMP_FORCE\n                    }\n                }));\n        } else if (gameState.gameOver) {\n            resetGame();\n        }\n    }, [\n        gameState.gameStarted,\n        gameState.gameOver,\n        resetGame\n    ]);\n    const createPipe = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((x)=>{\n        const gapY = Math.random() * (BASE_HEIGHT - PIPE_GAP - 100) + 50;\n        return {\n            x,\n            width: PIPE_WIDTH,\n            gapY,\n            gapHeight: PIPE_GAP,\n            passed: false\n        };\n    }, []);\n    const checkCollision = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((bird, pipes)=>{\n        if (bird.y - bird.radius <= 0 || bird.y + bird.radius >= BASE_HEIGHT) {\n            return true;\n        }\n        for (const pipe of pipes){\n            if (bird.x + bird.radius > pipe.x && bird.x - bird.radius < pipe.x + pipe.width && (bird.y - bird.radius < pipe.gapY || bird.y + bird.radius > pipe.gapY + pipe.gapHeight)) {\n                return true;\n            }\n        }\n        return false;\n    }, []);\n    const gameLoop = ()=>{\n        setGameState((prev)=>{\n            if (prev.gameOver) return prev;\n            const newBird = {\n                ...prev.bird\n            };\n            let newPipes = [\n                ...prev.pipes\n            ];\n            let newScore = prev.score;\n            // Only apply physics when game is started\n            if (prev.gameStarted) {\n                newBird.velocity += GRAVITY;\n                newBird.y += newBird.velocity;\n                // Only move pipes when game is started\n                newPipes = newPipes.map((pipe)=>({\n                        ...pipe,\n                        x: pipe.x - PIPE_SPEED\n                    }));\n                newPipes.forEach((pipe)=>{\n                    if (!pipe.passed && newBird.x > pipe.x + pipe.width) {\n                        pipe.passed = true;\n                        newScore += 1;\n                    }\n                });\n                newPipes = newPipes.filter((pipe)=>pipe.x + pipe.width > 0);\n                if (newPipes.length === 0) {\n                    const gapY = Math.random() * (BASE_HEIGHT - PIPE_GAP - 100) + 50;\n                    newPipes.push({\n                        x: BASE_WIDTH + 150,\n                        width: PIPE_WIDTH,\n                        gapY,\n                        gapHeight: PIPE_GAP,\n                        passed: false\n                    });\n                } else if (newPipes[newPipes.length - 1].x < BASE_WIDTH - 200) {\n                    const gapY = Math.random() * (BASE_HEIGHT - PIPE_GAP - 100) + 50;\n                    newPipes.push({\n                        x: BASE_WIDTH,\n                        width: PIPE_WIDTH,\n                        gapY,\n                        gapHeight: PIPE_GAP,\n                        passed: false\n                    });\n                }\n            }\n            // Check collision\n            let collision = false;\n            let newExplosion = {\n                ...prev.explosion\n            };\n            if (prev.gameStarted) {\n                if (newBird.y - newBird.radius <= 0 || newBird.y + newBird.radius >= BASE_HEIGHT) {\n                    collision = true;\n                    newExplosion = {\n                        active: true,\n                        x: newBird.x,\n                        y: newBird.y,\n                        frame: 0\n                    };\n                }\n                for (const pipe of newPipes){\n                    if (newBird.x + newBird.radius > pipe.x && newBird.x - newBird.radius < pipe.x + pipe.width && (newBird.y - newBird.radius < pipe.gapY || newBird.y + newBird.radius > pipe.gapY + pipe.gapHeight)) {\n                        collision = true;\n                        newExplosion = {\n                            active: true,\n                            x: newBird.x,\n                            y: newBird.y,\n                            frame: 0\n                        };\n                        break;\n                    }\n                }\n            }\n            // Update explosion animation\n            if (newExplosion.active) {\n                newExplosion.frame += 1;\n                if (newExplosion.frame > 30) {\n                    newExplosion.active = false;\n                }\n            }\n            return {\n                ...prev,\n                bird: newBird,\n                pipes: newPipes,\n                score: newScore,\n                gameOver: collision,\n                explosion: newExplosion\n            };\n        });\n    };\n    const draw = ()=>{\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) return;\n        setGameState((currentState)=>{\n            ctx.clearRect(0, 0, BASE_WIDTH, BASE_HEIGHT);\n            // Beach sky gradient\n            const skyGradient = ctx.createLinearGradient(0, 0, 0, BASE_HEIGHT * 0.7);\n            skyGradient.addColorStop(0, \"#87CEEB\");\n            skyGradient.addColorStop(0.5, \"#ADD8E6\");\n            skyGradient.addColorStop(1, \"#F0E68C\");\n            ctx.fillStyle = skyGradient;\n            ctx.fillRect(0, 0, BASE_WIDTH, BASE_HEIGHT * 0.7);\n            // Beach sand\n            ctx.fillStyle = \"#F4A460\";\n            ctx.fillRect(0, BASE_HEIGHT * 0.7, BASE_WIDTH, BASE_HEIGHT * 0.3);\n            // Add some texture to sand with dots\n            ctx.fillStyle = \"#DEB887\";\n            for(let i = 0; i < 50; i++){\n                const x = Math.random() * BASE_WIDTH;\n                const y = BASE_HEIGHT * 0.7 + Math.random() * BASE_HEIGHT * 0.3;\n                ctx.beginPath();\n                ctx.arc(x, y, 1, 0, Math.PI * 2);\n                ctx.fill();\n            }\n            currentState.pipes.forEach((pipe)=>{\n                // Draw cactus top part\n                ctx.fillStyle = \"#228B22\";\n                ctx.fillRect(pipe.x + pipe.width * 0.2, 0, pipe.width * 0.6, pipe.gapY);\n                // Cactus arms (top)\n                if (pipe.gapY > 100) {\n                    ctx.fillRect(pipe.x, pipe.gapY * 0.3, pipe.width * 0.3, pipe.width * 0.2);\n                    ctx.fillRect(pipe.x + pipe.width * 0.7, pipe.gapY * 0.6, pipe.width * 0.3, pipe.width * 0.2);\n                }\n                // Draw cactus bottom part\n                ctx.fillRect(pipe.x + pipe.width * 0.2, pipe.gapY + pipe.gapHeight, pipe.width * 0.6, BASE_HEIGHT - pipe.gapY - pipe.gapHeight);\n                // Cactus arms (bottom)\n                if (BASE_HEIGHT - pipe.gapY - pipe.gapHeight > 100) {\n                    const bottomHeight = BASE_HEIGHT - pipe.gapY - pipe.gapHeight;\n                    ctx.fillRect(pipe.x, pipe.gapY + pipe.gapHeight + bottomHeight * 0.2, pipe.width * 0.3, pipe.width * 0.2);\n                    ctx.fillRect(pipe.x + pipe.width * 0.7, pipe.gapY + pipe.gapHeight + bottomHeight * 0.5, pipe.width * 0.3, pipe.width * 0.2);\n                }\n                // Add cactus spines\n                ctx.strokeStyle = \"#006400\";\n                ctx.lineWidth = 1;\n                // Vertical spines on main body\n                for(let i = 0; i < 3; i++){\n                    const spineX = pipe.x + pipe.width * 0.3 + i * pipe.width * 0.15;\n                    // Top cactus spines\n                    ctx.beginPath();\n                    ctx.moveTo(spineX, 10);\n                    ctx.lineTo(spineX, pipe.gapY - 10);\n                    ctx.stroke();\n                    // Bottom cactus spines\n                    ctx.beginPath();\n                    ctx.moveTo(spineX, pipe.gapY + pipe.gapHeight + 10);\n                    ctx.lineTo(spineX, BASE_HEIGHT - 10);\n                    ctx.stroke();\n                }\n                // Cactus outline\n                ctx.strokeStyle = \"#006400\";\n                ctx.lineWidth = 2;\n                ctx.strokeRect(pipe.x + pipe.width * 0.2, 0, pipe.width * 0.6, pipe.gapY);\n                ctx.strokeRect(pipe.x + pipe.width * 0.2, pipe.gapY + pipe.gapHeight, pipe.width * 0.6, BASE_HEIGHT - pipe.gapY - pipe.gapHeight);\n            });\n            // Draw volleyball - only if not exploded\n            if (!currentState.explosion.active || !currentState.gameOver) {\n                const centerX = currentState.bird.x;\n                const centerY = currentState.bird.y;\n                const radius = currentState.bird.radius;\n                // Create volleyball segments (6 segments total)\n                for(let i = 0; i < 6; i++){\n                    const startAngle = i * Math.PI / 3;\n                    const endAngle = (i + 1) * Math.PI / 3;\n                    ctx.beginPath();\n                    ctx.moveTo(centerX, centerY);\n                    ctx.arc(centerX, centerY, radius, startAngle, endAngle);\n                    ctx.closePath();\n                    // Alternate between yellow and blue segments\n                    if (i % 2 === 0) {\n                        ctx.fillStyle = \"#FFD700\" // Gold/Yellow\n                        ;\n                    } else {\n                        ctx.fillStyle = \"#1E90FF\" // Dodger Blue\n                        ;\n                    }\n                    ctx.fill();\n                    // Add segment border\n                    ctx.strokeStyle = \"#333333\";\n                    ctx.lineWidth = 1;\n                    ctx.stroke();\n                }\n                // Add the characteristic volleyball lines\n                ctx.strokeStyle = \"#333333\";\n                ctx.lineWidth = 2;\n                // Three curved lines dividing the segments\n                for(let i = 0; i < 3; i++){\n                    const angle = i * Math.PI / 3;\n                    ctx.beginPath();\n                    ctx.moveTo(centerX + Math.cos(angle) * radius, centerY + Math.sin(angle) * radius);\n                    ctx.lineTo(centerX - Math.cos(angle) * radius, centerY - Math.sin(angle) * radius);\n                    ctx.stroke();\n                }\n                // Outer border\n                ctx.strokeStyle = \"#333333\";\n                ctx.lineWidth = 2;\n                ctx.beginPath();\n                ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n                ctx.stroke();\n            }\n            // Draw explosion effect\n            if (currentState.explosion.active) {\n                const explosionSize = currentState.explosion.frame * 3;\n                const centerX = currentState.explosion.x;\n                const centerY = currentState.explosion.y;\n                // Draw explosion particles\n                ctx.fillStyle = \"#FF4500\" // Orange-red\n                ;\n                for(let i = 0; i < 8; i++){\n                    const angle = i * Math.PI * 2 / 8;\n                    const distance = explosionSize;\n                    const x = centerX + Math.cos(angle) * distance;\n                    const y = centerY + Math.sin(angle) * distance;\n                    ctx.beginPath();\n                    ctx.arc(x, y, Math.max(1, 8 - currentState.explosion.frame * 0.3), 0, Math.PI * 2);\n                    ctx.fill();\n                }\n                // Draw central explosion\n                ctx.fillStyle = \"#FFD700\" // Yellow\n                ;\n                ctx.beginPath();\n                ctx.arc(centerX, centerY, Math.max(1, explosionSize * 0.5), 0, Math.PI * 2);\n                ctx.fill();\n                // Draw explosion sparks\n                ctx.fillStyle = \"#FFFFFF\" // White sparks\n                ;\n                for(let i = 0; i < 12; i++){\n                    const angle = i * Math.PI * 2 / 12;\n                    const distance = explosionSize * 1.5;\n                    const x = centerX + Math.cos(angle) * distance;\n                    const y = centerY + Math.sin(angle) * distance;\n                    ctx.beginPath();\n                    ctx.arc(x, y, 2, 0, Math.PI * 2);\n                    ctx.fill();\n                }\n            }\n            ctx.fillStyle = \"#000\";\n            ctx.font = \"bold \".concat(Math.max(16, 24 * scale), \"px Arial\");\n            ctx.textAlign = \"center\";\n            ctx.fillText(\"Score: \".concat(currentState.score), BASE_WIDTH / 2, 40);\n            if (!currentState.gameStarted && !currentState.gameOver) {\n                ctx.fillStyle = \"rgba(0, 0, 0, 0.7)\";\n                ctx.fillRect(0, 0, BASE_WIDTH, BASE_HEIGHT);\n                ctx.fillStyle = \"#FFF\";\n                ctx.font = \"bold \".concat(Math.max(20, 32 * scale), \"px Arial\");\n                ctx.fillText(\"Beach Volleyball\", BASE_WIDTH / 2, BASE_HEIGHT / 2 - 50);\n                ctx.font = \"\".concat(Math.max(14, 18 * scale), \"px Arial\");\n                ctx.fillText(\"Tap to Bounce!\", BASE_WIDTH / 2, BASE_HEIGHT / 2 + 20);\n                ctx.font = \"\".concat(Math.max(10, 14 * scale), \"px Arial\");\n                ctx.fillText(\"Desktop: Space or ↑ Arrow | Mobile: Tap\", BASE_WIDTH / 2, BASE_HEIGHT / 2 + 60);\n            }\n            if (currentState.gameOver) {\n                ctx.fillStyle = \"rgba(255, 0, 0, 0.7)\";\n                ctx.fillRect(0, 0, BASE_WIDTH, BASE_HEIGHT);\n                ctx.fillStyle = \"#FFF\";\n                ctx.font = \"bold \".concat(Math.max(20, 32 * scale), \"px Arial\");\n                ctx.fillText(\"Game Over\", BASE_WIDTH / 2, BASE_HEIGHT / 2 - 50);\n                ctx.font = \"\".concat(Math.max(14, 18 * scale), \"px Arial\");\n                ctx.fillText(\"Final Score: \".concat(currentState.score), BASE_WIDTH / 2, BASE_HEIGHT / 2);\n                ctx.fillText(\"Tap to Play Again\", BASE_WIDTH / 2, BASE_HEIGHT / 2 + 30);\n            }\n            return currentState;\n        });\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const animate = ()=>{\n            gameLoop();\n            draw();\n            animationRef.current = requestAnimationFrame(animate);\n        };\n        animationRef.current = requestAnimationFrame(animate);\n        return ()=>{\n            if (animationRef.current) {\n                cancelAnimationFrame(animationRef.current);\n            }\n        };\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const handleKeyPress = (e)=>{\n            if (e.code === \"Space\" || e.code === \"ArrowUp\") {\n                e.preventDefault();\n                jump();\n            }\n        };\n        window.addEventListener(\"keydown\", handleKeyPress);\n        return ()=>window.removeEventListener(\"keydown\", handleKeyPress);\n    }, [\n        jump\n    ]);\n    const handleTouch = (e)=>{\n        e.preventDefault();\n        jump();\n    };\n    const handleClick = (e)=>{\n        e.preventDefault();\n        jump();\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex items-center justify-center min-h-screen w-full p-1 sm:p-2\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"canvas\", {\n            ref: canvasRef,\n            width: BASE_WIDTH,\n            height: BASE_HEIGHT,\n            className: \"border border-white sm:border-2 rounded-md sm:rounded-lg shadow-xl sm:shadow-2xl cursor-pointer select-none\",\n            onTouchStart: handleTouch,\n            onClick: handleClick,\n            style: {\n                touchAction: \"none\",\n                width: \"\".concat(canvasSize.width, \"px\"),\n                height: \"\".concat(canvasSize.height, \"px\"),\n                maxWidth: \"100vw\",\n                maxHeight: \"calc(100vh - 20px)\"\n            }\n        }, void 0, false, {\n            fileName: \"/Users/lucasissayama/dev/claude-game/src/components/FlappyBirdGame.tsx\",\n            lineNumber: 517,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/lucasissayama/dev/claude-game/src/components/FlappyBirdGame.tsx\",\n        lineNumber: 516,\n        columnNumber: 5\n    }, this);\n}\n_s(FlappyBirdGame, \"w2ZplniP2M0lv6Olpb/2gaWLiNM=\");\n_c = FlappyBirdGame;\nvar _c;\n$RefreshReg$(_c, \"FlappyBirdGame\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL0ZsYXBweUJpcmRHYW1lLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFFZ0U7QUErQmhFLE1BQU1JLGFBQWE7QUFDbkIsTUFBTUMsY0FBYztBQUNwQixNQUFNQyxZQUFZO0FBQ2xCLE1BQU1DLGFBQWE7QUFDbkIsTUFBTUMsV0FBVztBQUNqQixNQUFNQyxVQUFVO0FBQ2hCLE1BQU1DLGFBQWEsQ0FBQztBQUNwQixNQUFNQyxhQUFhO0FBRUosU0FBU0M7O0lBQ3RCLE1BQU1DLFlBQVlaLDZDQUFNQSxDQUFvQjtJQUM1QyxNQUFNYSxlQUFlYiw2Q0FBTUE7SUFFM0IsTUFBTSxDQUFDYyxZQUFZQyxjQUFjLEdBQUdkLCtDQUFRQSxDQUFDO1FBQUVlLE9BQU9iO1FBQVljLFFBQVFiO0lBQVk7SUFDdEYsTUFBTSxDQUFDYyxPQUFPQyxTQUFTLEdBQUdsQiwrQ0FBUUEsQ0FBQztJQUVuQ0YsZ0RBQVNBLENBQUM7UUFDUixNQUFNcUIsbUJBQW1CO1lBQ3ZCLElBQUksSUFBa0IsRUFBYTtnQkFDakMsTUFBTUMsY0FBY0MsT0FBT0MsVUFBVTtnQkFDckMsTUFBTUMsZUFBZUYsT0FBT0csV0FBVztnQkFFdkMsK0RBQStEO2dCQUMvRCxNQUFNQyxTQUFTLENBQUNMLGNBQWMsRUFBQyxJQUFLbEIsV0FBWSxlQUFlOztnQkFDL0QsTUFBTXdCLFNBQVMsQ0FBQ0gsZUFBZSxHQUFFLElBQUtwQixZQUFhLHdCQUF3Qjs7Z0JBQzNFLE1BQU13QixXQUFXQyxLQUFLQyxHQUFHLENBQUNKLFFBQVFDLFFBQVEsS0FBSyxtQkFBbUI7O2dCQUVsRSxNQUFNWCxRQUFRYixhQUFheUI7Z0JBQzNCLE1BQU1YLFNBQVNiLGNBQWN3QjtnQkFFN0JiLGNBQWM7b0JBQUVDO29CQUFPQztnQkFBTztnQkFDOUJFLFNBQVNTO1lBQ1g7UUFDRjtRQUVBUjtRQUNBRSxPQUFPUyxnQkFBZ0IsQ0FBQyxVQUFVWDtRQUNsQ0UsT0FBT1MsZ0JB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QUNIO1FBQ25CQSxFQUFFRSxjQUFjO1FBQ2hCakU7SUFDRjtJQUVBLE1BQU1tRSxjQUFjLENBQUNKO1FBQ25CQSxFQUFFRSxjQUFjO1FBQ2hCakU7SUFDRjtJQUVBLHFCQUNFLDhEQUFDb0U7UUFBSUMsV0FBVTtrQkFDYiw0RUFBQ2hEO1lBQ0NpRCxLQUFLMUc7WUFDTEksT0FBT2I7WUFDUGMsUUFBUWI7WUFDUmlILFdBQVU7WUFDVkUsY0FBY0w7WUFDZE0sU0FBU0w7WUFDVE0sT0FBTztnQkFDTEMsYUFBYTtnQkFDYjFHLE9BQU8sR0FBb0IsT0FBakJGLFdBQVdFLEtBQUssRUFBQztnQkFDM0JDLFFBQVEsR0FBcUIsT0FBbEJILFdBQVdHLE1BQU0sRUFBQztnQkFDN0IwRyxVQUFVO2dCQUNWQyxXQUFXO1lBQ2I7Ozs7Ozs7Ozs7O0FBSVI7R0EzZXdCakg7S0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvRmxhcHB5QmlyZEdhbWUudHN4P2E4ZDAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnXG5cbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCdcblxuaW50ZXJmYWNlIEJpcmQge1xuICB4OiBudW1iZXJcbiAgeTogbnVtYmVyXG4gIHZlbG9jaXR5OiBudW1iZXJcbiAgcmFkaXVzOiBudW1iZXJcbn1cblxuaW50ZXJmYWNlIFBpcGUge1xuICB4OiBudW1iZXJcbiAgd2lkdGg6IG51bWJlclxuICBnYXBZOiBudW1iZXJcbiAgZ2FwSGVpZ2h0OiBudW1iZXJcbiAgcGFzc2VkOiBib29sZWFuXG59XG5cbmludGVyZmFjZSBHYW1lU3RhdGUge1xuICBiaXJkOiBCaXJkXG4gIHBpcGVzOiBQaXBlW11cbiAgc2NvcmU6IG51bWJlclxuICBnYW1lU3RhcnRlZDogYm9vbGVhblxuICBnYW1lT3ZlcjogYm9vbGVhblxuICBleHBsb3Npb246IHtcbiAgICBhY3RpdmU6IGJvb2xlYW5cbiAgICB4OiBudW1iZXJcbiAgICB5OiBudW1iZXJcbiAgICBmcmFtZTogbnVtYmVyXG4gIH1cbn1cblxuY29uc3QgQkFTRV9XSURUSCA9IDQwMFxuY29uc3QgQkFTRV9IRUlHSFQgPSA2MDBcbmNvbnN0IEJJUkRfU0laRSA9IDIwXG5jb25zdCBQSVBFX1dJRFRIID0gNjBcbmNvbnN0IFBJUEVfR0FQID0gMjAwXG5jb25zdCBHUkFWSVRZID0gMC4zXG5jb25zdCBKVU1QX0ZPUkNFID0gLTEwXG5jb25zdCBQSVBFX1NQRUVEID0gMVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBGbGFwcHlCaXJkR2FtZSgpIHtcbiAgY29uc3QgY2FudmFzUmVmID0gdXNlUmVmPEhUTUxDYW52YXNFbGVtZW50PihudWxsKVxuICBjb25zdCBhbmltYXRpb25SZWYgPSB1c2VSZWY8bnVtYmVyPigpXG5cbiAgY29uc3QgW2NhbnZhc1NpemUsIHNldENhbnZhc1NpemVdID0gdXNlU3RhdGUoeyB3aWR0aDogQkFTRV9XSURUSCwgaGVpZ2h0OiBCQVNFX0hFSUdIVCB9KVxuICBjb25zdCBbc2NhbGUsIHNldFNjYWxlXSA9IHVzZVN0YXRlKDEpXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCB1cGRhdGVDYW52YXNTaXplID0gKCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnN0IHNjcmVlbldpZHRoID0gd2luZG93LmlubmVyV2lkdGhcbiAgICAgICAgY29uc3Qgc2NyZWVuSGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0XG5cbiAgICAgICAgLy8gQ2FsY3VsYXRlIHNjYWxlIHRvIGZpdCBzY3JlZW4gd2hpbGUgbWFpbnRhaW5pbmcgYXNwZWN0IHJhdGlvXG4gICAgICAgIGNvbnN0IHNjYWxlWCA9IChzY3JlZW5XaWR0aCAtIDQwKSAvIEJBU0VfV0lEVEggIC8vIDQwcHggcGFkZGluZ1xuICAgICAgICBjb25zdCBzY2FsZVkgPSAoc2NyZWVuSGVpZ2h0IC0gMTAwKSAvIEJBU0VfSEVJR0hUICAvLyAxMDBweCBmb3IgVUkgZWxlbWVudHNcbiAgICAgICAgY29uc3QgbmV3U2NhbGUgPSBNYXRoLm1pbihzY2FsZVgsIHNjYWxlWSwgMS4yKSAvLyBNYXggc2NhbGUgb2YgMS4yXG5cbiAgICAgICAgY29uc3Qgd2lkdGggPSBCQVNFX1dJRFRIICogbmV3U2NhbGVcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gQkFTRV9IRUlHSFQgKiBuZXdTY2FsZVxuXG4gICAgICAgIHNldENhbnZhc1NpemUoeyB3aWR0aCwgaGVpZ2h0IH0pXG4gICAgICAgIHNldFNjYWxlKG5ld1NjYWxlKVxuICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZUNhbnZhc1NpemUoKVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB1cGRhdGVDYW52YXNTaXplKVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIHVwZGF0ZUNhbnZhc1NpemUpXG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHVwZGF0ZUNhbnZhc1NpemUpXG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCB1cGRhdGVDYW52YXNTaXplKVxuICAgIH1cbiAgfSwgW10pXG5cblxuICBjb25zdCBbZ2FtZVN0YXRlLCBzZXRHYW1lU3RhdGVdID0gdXNlU3RhdGU8R2FtZVN0YXRlPih7XG4gICAgYmlyZDoge1xuICAgICAgeDogQkFTRV9XSURUSCAvIDQsXG4gICAgICB5OiBCQVNFX0hFSUdIVCAvIDIsXG4gICAgICB2ZWxvY2l0eTogMCxcbiAgICAgIHJhZGl1czogQklSRF9TSVpFIC8gMlxuICAgIH0sXG4gICAgcGlwZXM6IFtdLFxuICAgIHNjb3JlOiAwLFxuICAgIGdhbWVTdGFydGVkOiBmYWxzZSxcbiAgICBnYW1lT3ZlcjogZmFsc2UsXG4gICAgZXhwbG9zaW9uOiB7XG4gICAgICBhY3RpdmU6IGZhbHNlLFxuICAgICAgeDogMCxcbiAgICAgIHk6IDAsXG4gICAgICBmcmFtZTogMFxuICAgIH1cbiAgfSlcblxuICBjb25zdCByZXNldEdhbWUgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0R2FtZVN0YXRlKHtcbiAgICAgIGJpcmQ6IHtcbiAgICAgICAgeDogQkFTRV9XSURUSCAvIDQsXG4gICAgICAgIHk6IEJBU0VfSEVJR0hUIC8gMixcbiAgICAgICAgdmVsb2NpdHk6IDAsXG4gICAgICAgIHJhZGl1czogQklSRF9TSVpFIC8gMlxuICAgICAgfSxcbiAgICAgIHBpcGVzOiBbXSxcbiAgICAgIHNjb3JlOiAwLFxuICAgICAgZ2FtZVN0YXJ0ZWQ6IGZhbHNlLFxuICAgICAgZ2FtZU92ZXI6IGZhbHNlLFxuICAgICAgZXhwbG9zaW9uOiB7XG4gICAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgICAgIHg6IDAsXG4gICAgICAgIHk6IDAsXG4gICAgICAgIGZyYW1lOiAwXG4gICAgICB9XG4gICAgfSlcbiAgfSwgW10pXG5cbiAgY29uc3QganVtcCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAoIWdhbWVTdGF0ZS5nYW1lU3RhcnRlZCAmJiAhZ2FtZVN0YXRlLmdhbWVPdmVyKSB7XG4gICAgICBzZXRHYW1lU3RhdGUocHJldiA9PiAoe1xuICAgICAgICAuLi5wcmV2LFxuICAgICAgICBnYW1lU3RhcnRlZDogdHJ1ZSxcbiAgICAgICAgYmlyZDogeyAuLi5wcmV2LmJpcmQsIHZlbG9jaXR5OiBKVU1QX0ZPUkNFIH1cbiAgICAgIH0pKVxuICAgIH0gZWxzZSBpZiAoZ2FtZVN0YXRlLmdhbWVTdGFydGVkICYmICFnYW1lU3RhdGUuZ2FtZU92ZXIpIHtcbiAgICAgIHNldEdhbWVTdGF0ZShwcmV2ID0+ICh7XG4gICAgICAgIC4uLnByZXYsXG4gICAgICAgIGJpcmQ6IHsgLi4ucHJldi5iaXJkLCB2ZWxvY2l0eTogSlVNUF9GT1JDRSB9XG4gICAgICB9KSlcbiAgICB9IGVsc2UgaWYgKGdhbWVTdGF0ZS5nYW1lT3Zlcikge1xuICAgICAgcmVzZXRHYW1lKClcbiAgICB9XG4gIH0sIFtnYW1lU3RhdGUuZ2FtZVN0YXJ0ZWQsIGdhbWVTdGF0ZS5nYW1lT3ZlciwgcmVzZXRHYW1lXSlcblxuICBjb25zdCBjcmVhdGVQaXBlID0gdXNlQ2FsbGJhY2soKHg6IG51bWJlcik6IFBpcGUgPT4ge1xuICAgIGNvbnN0IGdhcFkgPSBNYXRoLnJhbmRvbSgpICogKEJBU0VfSEVJR0hUIC0gUElQRV9HQVAgLSAxMDApICsgNTBcbiAgICByZXR1cm4ge1xuICAgICAgeCxcbiAgICAgIHdpZHRoOiBQSVBFX1dJRFRILFxuICAgICAgZ2FwWSxcbiAgICAgIGdhcEhlaWdodDogUElQRV9HQVAsXG4gICAgICBwYXNzZWQ6IGZhbHNlXG4gICAgfVxuICB9LCBbXSlcblxuICBjb25zdCBjaGVja0NvbGxpc2lvbiA9IHVzZUNhbGxiYWNrKChiaXJkOiBCaXJkLCBwaXBlczogUGlwZVtdKTogYm9vbGVhbiA9PiB7XG4gICAgaWYgKGJpcmQueSAtIGJpcmQucmFkaXVzIDw9IDAgfHwgYmlyZC55ICsgYmlyZC5yYWRpdXMgPj0gQkFTRV9IRUlHSFQpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBwaXBlIG9mIHBpcGVzKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGJpcmQueCArIGJpcmQucmFkaXVzID4gcGlwZS54ICYmXG4gICAgICAgIGJpcmQueCAtIGJpcmQucmFkaXVzIDwgcGlwZS54ICsgcGlwZS53aWR0aCAmJlxuICAgICAgICAoYmlyZC55IC0gYmlyZC5yYWRpdXMgPCBwaXBlLmdhcFkgfHwgYmlyZC55ICsgYmlyZC5yYWRpdXMgPiBwaXBlLmdhcFkgKyBwaXBlLmdhcEhlaWdodClcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9LCBbXSlcblxuICBjb25zdCBnYW1lTG9vcCA9ICgpID0+IHtcbiAgICBzZXRHYW1lU3RhdGUocHJldiA9PiB7XG4gICAgICBpZiAocHJldi5nYW1lT3ZlcikgcmV0dXJuIHByZXZcblxuICAgICAgY29uc3QgbmV3QmlyZCA9IHsgLi4ucHJldi5iaXJkIH1cbiAgICAgIGxldCBuZXdQaXBlcyA9IFsuLi5wcmV2LnBpcGVzXVxuICAgICAgbGV0IG5ld1Njb3JlID0gcHJldi5zY29yZVxuXG4gICAgICAvLyBPbmx5IGFwcGx5IHBoeXNpY3Mgd2hlbiBnYW1lIGlzIHN0YXJ0ZWRcbiAgICAgIGlmIChwcmV2LmdhbWVTdGFydGVkKSB7XG4gICAgICAgIG5ld0JpcmQudmVsb2NpdHkgKz0gR1JBVklUWVxuICAgICAgICBuZXdCaXJkLnkgKz0gbmV3QmlyZC52ZWxvY2l0eVxuXG4gICAgICAgIC8vIE9ubHkgbW92ZSBwaXBlcyB3aGVuIGdhbWUgaXMgc3RhcnRlZFxuICAgICAgICBuZXdQaXBlcyA9IG5ld1BpcGVzLm1hcChwaXBlID0+ICh7IC4uLnBpcGUsIHg6IHBpcGUueCAtIFBJUEVfU1BFRUQgfSkpXG5cbiAgICAgICAgbmV3UGlwZXMuZm9yRWFjaChwaXBlID0+IHtcbiAgICAgICAgICBpZiAoIXBpcGUucGFzc2VkICYmIG5ld0JpcmQueCA+IHBpcGUueCArIHBpcGUud2lkdGgpIHtcbiAgICAgICAgICAgIHBpcGUucGFzc2VkID0gdHJ1ZVxuICAgICAgICAgICAgbmV3U2NvcmUgKz0gMVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICBuZXdQaXBlcyA9IG5ld1BpcGVzLmZpbHRlcihwaXBlID0+IHBpcGUueCArIHBpcGUud2lkdGggPiAwKVxuXG4gICAgICAgIGlmIChuZXdQaXBlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBjb25zdCBnYXBZID0gTWF0aC5yYW5kb20oKSAqIChCQVNFX0hFSUdIVCAtIFBJUEVfR0FQIC0gMTAwKSArIDUwXG4gICAgICAgICAgbmV3UGlwZXMucHVzaCh7XG4gICAgICAgICAgICB4OiBCQVNFX1dJRFRIICsgMTUwLFxuICAgICAgICAgICAgd2lkdGg6IFBJUEVfV0lEVEgsXG4gICAgICAgICAgICBnYXBZLFxuICAgICAgICAgICAgZ2FwSGVpZ2h0OiBQSVBFX0dBUCxcbiAgICAgICAgICAgIHBhc3NlZDogZmFsc2VcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2UgaWYgKG5ld1BpcGVzW25ld1BpcGVzLmxlbmd0aCAtIDFdLnggPCBCQVNFX1dJRFRIIC0gMjAwKSB7XG4gICAgICAgICAgY29uc3QgZ2FwWSA9IE1hdGgucmFuZG9tKCkgKiAoQkFTRV9IRUlHSFQgLSBQSVBFX0dBUCAtIDEwMCkgKyA1MFxuICAgICAgICAgIG5ld1BpcGVzLnB1c2goe1xuICAgICAgICAgICAgeDogQkFTRV9XSURUSCxcbiAgICAgICAgICAgIHdpZHRoOiBQSVBFX1dJRFRILFxuICAgICAgICAgICAgZ2FwWSxcbiAgICAgICAgICAgIGdhcEhlaWdodDogUElQRV9HQVAsXG4gICAgICAgICAgICBwYXNzZWQ6IGZhbHNlXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBjb2xsaXNpb25cbiAgICAgIGxldCBjb2xsaXNpb24gPSBmYWxzZVxuICAgICAgbGV0IG5ld0V4cGxvc2lvbiA9IHsgLi4ucHJldi5leHBsb3Npb24gfVxuXG4gICAgICBpZiAocHJldi5nYW1lU3RhcnRlZCkge1xuICAgICAgICBpZiAobmV3QmlyZC55IC0gbmV3QmlyZC5yYWRpdXMgPD0gMCB8fCBuZXdCaXJkLnkgKyBuZXdCaXJkLnJhZGl1cyA+PSBCQVNFX0hFSUdIVCkge1xuICAgICAgICAgIGNvbGxpc2lvbiA9IHRydWVcbiAgICAgICAgICBuZXdFeHBsb3Npb24gPSB7XG4gICAgICAgICAgICBhY3RpdmU6IHRydWUsXG4gICAgICAgICAgICB4OiBuZXdCaXJkLngsXG4gICAgICAgICAgICB5OiBuZXdCaXJkLnksXG4gICAgICAgICAgICBmcmFtZTogMFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgcGlwZSBvZiBuZXdQaXBlcykge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIG5ld0JpcmQueCArIG5ld0JpcmQucmFkaXVzID4gcGlwZS54ICYmXG4gICAgICAgICAgICBuZXdCaXJkLnggLSBuZXdCaXJkLnJhZGl1cyA8IHBpcGUueCArIHBpcGUud2lkdGggJiZcbiAgICAgICAgICAgIChuZXdCaXJkLnkgLSBuZXdCaXJkLnJhZGl1cyA8IHBpcGUuZ2FwWSB8fCBuZXdCaXJkLnkgKyBuZXdCaXJkLnJhZGl1cyA+IHBpcGUuZ2FwWSArIHBpcGUuZ2FwSGVpZ2h0KVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY29sbGlzaW9uID0gdHJ1ZVxuICAgICAgICAgICAgbmV3RXhwbG9zaW9uID0ge1xuICAgICAgICAgICAgICBhY3RpdmU6IHRydWUsXG4gICAgICAgICAgICAgIHg6IG5ld0JpcmQueCxcbiAgICAgICAgICAgICAgeTogbmV3QmlyZC55LFxuICAgICAgICAgICAgICBmcmFtZTogMFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVXBkYXRlIGV4cGxvc2lvbiBhbmltYXRpb25cbiAgICAgIGlmIChuZXdFeHBsb3Npb24uYWN0aXZlKSB7XG4gICAgICAgIG5ld0V4cGxvc2lvbi5mcmFtZSArPSAxXG4gICAgICAgIGlmIChuZXdFeHBsb3Npb24uZnJhbWUgPiAzMCkgeyAvLyBBbmltYXRpb24gbGFzdHMgMzAgZnJhbWVzXG4gICAgICAgICAgbmV3RXhwbG9zaW9uLmFjdGl2ZSA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4ucHJldixcbiAgICAgICAgYmlyZDogbmV3QmlyZCxcbiAgICAgICAgcGlwZXM6IG5ld1BpcGVzLFxuICAgICAgICBzY29yZTogbmV3U2NvcmUsXG4gICAgICAgIGdhbWVPdmVyOiBjb2xsaXNpb24sXG4gICAgICAgIGV4cGxvc2lvbjogbmV3RXhwbG9zaW9uXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGNvbnN0IGRyYXcgPSAoKSA9PiB7XG4gICAgY29uc3QgY2FudmFzID0gY2FudmFzUmVmLmN1cnJlbnRcbiAgICBpZiAoIWNhbnZhcykgcmV0dXJuXG5cbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKVxuICAgIGlmICghY3R4KSByZXR1cm5cblxuICAgIHNldEdhbWVTdGF0ZShjdXJyZW50U3RhdGUgPT4ge1xuICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBCQVNFX1dJRFRILCBCQVNFX0hFSUdIVClcblxuICAgICAgLy8gQmVhY2ggc2t5IGdyYWRpZW50XG4gICAgICBjb25zdCBza3lHcmFkaWVudCA9IGN0eC5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLCAwLCAwLCBCQVNFX0hFSUdIVCAqIDAuNylcbiAgICAgIHNreUdyYWRpZW50LmFkZENvbG9yU3RvcCgwLCAnIzg3Q0VFQicpXG4gICAgICBza3lHcmFkaWVudC5hZGRDb2xvclN0b3AoMC41LCAnI0FERDhFNicpXG4gICAgICBza3lHcmFkaWVudC5hZGRDb2xvclN0b3AoMSwgJyNGMEU2OEMnKVxuICAgICAgY3R4LmZpbGxTdHlsZSA9IHNreUdyYWRpZW50XG4gICAgICBjdHguZmlsbFJlY3QoMCwgMCwgQkFTRV9XSURUSCwgQkFTRV9IRUlHSFQgKiAwLjcpXG5cbiAgICAgIC8vIEJlYWNoIHNhbmRcbiAgICAgIGN0eC5maWxsU3R5bGUgPSAnI0Y0QTQ2MCdcbiAgICAgIGN0eC5maWxsUmVjdCgwLCBCQVNFX0hFSUdIVCAqIDAuNywgQkFTRV9XSURUSCwgQkFTRV9IRUlHSFQgKiAwLjMpXG5cbiAgICAgIC8vIEFkZCBzb21lIHRleHR1cmUgdG8gc2FuZCB3aXRoIGRvdHNcbiAgICAgIGN0eC5maWxsU3R5bGUgPSAnI0RFQjg4NydcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNTA7IGkrKykge1xuICAgICAgICBjb25zdCB4ID0gTWF0aC5yYW5kb20oKSAqIEJBU0VfV0lEVEhcbiAgICAgICAgY29uc3QgeSA9IEJBU0VfSEVJR0hUICogMC43ICsgTWF0aC5yYW5kb20oKSAqIEJBU0VfSEVJR0hUICogMC4zXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKVxuICAgICAgICBjdHguYXJjKHgsIHksIDEsIDAsIE1hdGguUEkgKiAyKVxuICAgICAgICBjdHguZmlsbCgpXG4gICAgICB9XG5cbiAgICAgIGN1cnJlbnRTdGF0ZS5waXBlcy5mb3JFYWNoKHBpcGUgPT4ge1xuICAgICAgICAvLyBEcmF3IGNhY3R1cyB0b3AgcGFydFxuICAgICAgICBjdHguZmlsbFN0eWxlID0gJyMyMjhCMjInXG4gICAgICAgIGN0eC5maWxsUmVjdChwaXBlLnggKyBwaXBlLndpZHRoICogMC4yLCAwLCBwaXBlLndpZHRoICogMC42LCBwaXBlLmdhcFkpXG5cbiAgICAgICAgLy8gQ2FjdHVzIGFybXMgKHRvcClcbiAgICAgICAgaWYgKHBpcGUuZ2FwWSA+IDEwMCkge1xuICAgICAgICAgIGN0eC5maWxsUmVjdChwaXBlLngsIHBpcGUuZ2FwWSAqIDAuMywgcGlwZS53aWR0aCAqIDAuMywgcGlwZS53aWR0aCAqIDAuMilcbiAgICAgICAgICBjdHguZmlsbFJlY3QocGlwZS54ICsgcGlwZS53aWR0aCAqIDAuNywgcGlwZS5nYXBZICogMC42LCBwaXBlLndpZHRoICogMC4zLCBwaXBlLndpZHRoICogMC4yKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRHJhdyBjYWN0dXMgYm90dG9tIHBhcnRcbiAgICAgICAgY3R4LmZpbGxSZWN0KHBpcGUueCArIHBpcGUud2lkdGggKiAwLjIsIHBpcGUuZ2FwWSArIHBpcGUuZ2FwSGVpZ2h0LCBwaXBlLndpZHRoICogMC42LCBCQVNFX0hFSUdIVCAtIHBpcGUuZ2FwWSAtIHBpcGUuZ2FwSGVpZ2h0KVxuXG4gICAgICAgIC8vIENhY3R1cyBhcm1zIChib3R0b20pXG4gICAgICAgIGlmIChCQVNFX0hFSUdIVCAtIHBpcGUuZ2FwWSAtIHBpcGUuZ2FwSGVpZ2h0ID4gMTAwKSB7XG4gICAgICAgICAgY29uc3QgYm90dG9tSGVpZ2h0ID0gQkFTRV9IRUlHSFQgLSBwaXBlLmdhcFkgLSBwaXBlLmdhcEhlaWdodFxuICAgICAgICAgIGN0eC5maWxsUmVjdChwaXBlLngsIHBpcGUuZ2FwWSArIHBpcGUuZ2FwSGVpZ2h0ICsgYm90dG9tSGVpZ2h0ICogMC4yLCBwaXBlLndpZHRoICogMC4zLCBwaXBlLndpZHRoICogMC4yKVxuICAgICAgICAgIGN0eC5maWxsUmVjdChwaXBlLnggKyBwaXBlLndpZHRoICogMC43LCBwaXBlLmdhcFkgKyBwaXBlLmdhcEhlaWdodCArIGJvdHRvbUhlaWdodCAqIDAuNSwgcGlwZS53aWR0aCAqIDAuMywgcGlwZS53aWR0aCAqIDAuMilcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkZCBjYWN0dXMgc3BpbmVzXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICcjMDA2NDAwJ1xuICAgICAgICBjdHgubGluZVdpZHRoID0gMVxuXG4gICAgICAgIC8vIFZlcnRpY2FsIHNwaW5lcyBvbiBtYWluIGJvZHlcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBzcGluZVggPSBwaXBlLnggKyBwaXBlLndpZHRoICogMC4zICsgaSAqIHBpcGUud2lkdGggKiAwLjE1XG4gICAgICAgICAgLy8gVG9wIGNhY3R1cyBzcGluZXNcbiAgICAgICAgICBjdHguYmVnaW5QYXRoKClcbiAgICAgICAgICBjdHgubW92ZVRvKHNwaW5lWCwgMTApXG4gICAgICAgICAgY3R4LmxpbmVUbyhzcGluZVgsIHBpcGUuZ2FwWSAtIDEwKVxuICAgICAgICAgIGN0eC5zdHJva2UoKVxuXG4gICAgICAgICAgLy8gQm90dG9tIGNhY3R1cyBzcGluZXNcbiAgICAgICAgICBjdHguYmVnaW5QYXRoKClcbiAgICAgICAgICBjdHgubW92ZVRvKHNwaW5lWCwgcGlwZS5nYXBZICsgcGlwZS5nYXBIZWlnaHQgKyAxMClcbiAgICAgICAgICBjdHgubGluZVRvKHNwaW5lWCwgQkFTRV9IRUlHSFQgLSAxMClcbiAgICAgICAgICBjdHguc3Ryb2tlKClcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENhY3R1cyBvdXRsaW5lXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICcjMDA2NDAwJ1xuICAgICAgICBjdHgubGluZVdpZHRoID0gMlxuICAgICAgICBjdHguc3Ryb2tlUmVjdChwaXBlLnggKyBwaXBlLndpZHRoICogMC4yLCAwLCBwaXBlLndpZHRoICogMC42LCBwaXBlLmdhcFkpXG4gICAgICAgIGN0eC5zdHJva2VSZWN0KHBpcGUueCArIHBpcGUud2lkdGggKiAwLjIsIHBpcGUuZ2FwWSArIHBpcGUuZ2FwSGVpZ2h0LCBwaXBlLndpZHRoICogMC42LCBCQVNFX0hFSUdIVCAtIHBpcGUuZ2FwWSAtIHBpcGUuZ2FwSGVpZ2h0KVxuICAgICAgfSlcblxuICAgICAgLy8gRHJhdyB2b2xsZXliYWxsIC0gb25seSBpZiBub3QgZXhwbG9kZWRcbiAgICAgIGlmICghY3VycmVudFN0YXRlLmV4cGxvc2lvbi5hY3RpdmUgfHwgIWN1cnJlbnRTdGF0ZS5nYW1lT3Zlcikge1xuICAgICAgICBjb25zdCBjZW50ZXJYID0gY3VycmVudFN0YXRlLmJpcmQueFxuICAgICAgICBjb25zdCBjZW50ZXJZID0gY3VycmVudFN0YXRlLmJpcmQueVxuICAgICAgICBjb25zdCByYWRpdXMgPSBjdXJyZW50U3RhdGUuYmlyZC5yYWRpdXNcblxuICAgICAgICAvLyBDcmVhdGUgdm9sbGV5YmFsbCBzZWdtZW50cyAoNiBzZWdtZW50cyB0b3RhbClcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA2OyBpKyspIHtcbiAgICAgICAgICBjb25zdCBzdGFydEFuZ2xlID0gKGkgKiBNYXRoLlBJKSAvIDNcbiAgICAgICAgICBjb25zdCBlbmRBbmdsZSA9ICgoaSArIDEpICogTWF0aC5QSSkgLyAzXG5cbiAgICAgICAgICBjdHguYmVnaW5QYXRoKClcbiAgICAgICAgICBjdHgubW92ZVRvKGNlbnRlclgsIGNlbnRlclkpXG4gICAgICAgICAgY3R4LmFyYyhjZW50ZXJYLCBjZW50ZXJZLCByYWRpdXMsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlKVxuICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKVxuXG4gICAgICAgICAgLy8gQWx0ZXJuYXRlIGJldHdlZW4geWVsbG93IGFuZCBibHVlIHNlZ21lbnRzXG4gICAgICAgICAgaWYgKGkgJSAyID09PSAwKSB7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gJyNGRkQ3MDAnIC8vIEdvbGQvWWVsbG93XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSAnIzFFOTBGRicgLy8gRG9kZ2VyIEJsdWVcbiAgICAgICAgICB9XG4gICAgICAgICAgY3R4LmZpbGwoKVxuXG4gICAgICAgICAgLy8gQWRkIHNlZ21lbnQgYm9yZGVyXG4gICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJyMzMzMzMzMnXG4gICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDFcbiAgICAgICAgICBjdHguc3Ryb2tlKClcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkZCB0aGUgY2hhcmFjdGVyaXN0aWMgdm9sbGV5YmFsbCBsaW5lc1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSAnIzMzMzMzMydcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDJcblxuICAgICAgICAvLyBUaHJlZSBjdXJ2ZWQgbGluZXMgZGl2aWRpbmcgdGhlIHNlZ21lbnRzXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgYW5nbGUgPSAoaSAqIE1hdGguUEkpIC8gM1xuICAgICAgICAgIGN0eC5iZWdpblBhdGgoKVxuICAgICAgICAgIGN0eC5tb3ZlVG8oXG4gICAgICAgICAgICBjZW50ZXJYICsgTWF0aC5jb3MoYW5nbGUpICogcmFkaXVzLFxuICAgICAgICAgICAgY2VudGVyWSArIE1hdGguc2luKGFuZ2xlKSAqIHJhZGl1c1xuICAgICAgICAgIClcbiAgICAgICAgICBjdHgubGluZVRvKFxuICAgICAgICAgICAgY2VudGVyWCAtIE1hdGguY29zKGFuZ2xlKSAqIHJhZGl1cyxcbiAgICAgICAgICAgIGNlbnRlclkgLSBNYXRoLnNpbihhbmdsZSkgKiByYWRpdXNcbiAgICAgICAgICApXG4gICAgICAgICAgY3R4LnN0cm9rZSgpXG4gICAgICAgIH1cblxuICAgICAgICAvLyBPdXRlciBib3JkZXJcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJyMzMzMzMzMnXG4gICAgICAgIGN0eC5saW5lV2lkdGggPSAyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKVxuICAgICAgICBjdHguYXJjKGNlbnRlclgsIGNlbnRlclksIHJhZGl1cywgMCwgTWF0aC5QSSAqIDIpXG4gICAgICAgIGN0eC5zdHJva2UoKVxuICAgICAgfVxuXG4gICAgICAvLyBEcmF3IGV4cGxvc2lvbiBlZmZlY3RcbiAgICAgIGlmIChjdXJyZW50U3RhdGUuZXhwbG9zaW9uLmFjdGl2ZSkge1xuICAgICAgICBjb25zdCBleHBsb3Npb25TaXplID0gY3VycmVudFN0YXRlLmV4cGxvc2lvbi5mcmFtZSAqIDNcbiAgICAgICAgY29uc3QgY2VudGVyWCA9IGN1cnJlbnRTdGF0ZS5leHBsb3Npb24ueFxuICAgICAgICBjb25zdCBjZW50ZXJZID0gY3VycmVudFN0YXRlLmV4cGxvc2lvbi55XG5cbiAgICAgICAgLy8gRHJhdyBleHBsb3Npb24gcGFydGljbGVzXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSAnI0ZGNDUwMCcgLy8gT3JhbmdlLXJlZFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDg7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGFuZ2xlID0gKGkgKiBNYXRoLlBJICogMikgLyA4XG4gICAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBleHBsb3Npb25TaXplXG4gICAgICAgICAgY29uc3QgeCA9IGNlbnRlclggKyBNYXRoLmNvcyhhbmdsZSkgKiBkaXN0YW5jZVxuICAgICAgICAgIGNvbnN0IHkgPSBjZW50ZXJZICsgTWF0aC5zaW4oYW5nbGUpICogZGlzdGFuY2VcblxuICAgICAgICAgIGN0eC5iZWdpblBhdGgoKVxuICAgICAgICAgIGN0eC5hcmMoeCwgeSwgTWF0aC5tYXgoMSwgOCAtIGN1cnJlbnRTdGF0ZS5leHBsb3Npb24uZnJhbWUgKiAwLjMpLCAwLCBNYXRoLlBJICogMilcbiAgICAgICAgICBjdHguZmlsbCgpXG4gICAgICAgIH1cblxuICAgICAgICAvLyBEcmF3IGNlbnRyYWwgZXhwbG9zaW9uXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSAnI0ZGRDcwMCcgLy8gWWVsbG93XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKVxuICAgICAgICBjdHguYXJjKGNlbnRlclgsIGNlbnRlclksIE1hdGgubWF4KDEsIGV4cGxvc2lvblNpemUgKiAwLjUpLCAwLCBNYXRoLlBJICogMilcbiAgICAgICAgY3R4LmZpbGwoKVxuXG4gICAgICAgIC8vIERyYXcgZXhwbG9zaW9uIHNwYXJrc1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gJyNGRkZGRkYnIC8vIFdoaXRlIHNwYXJrc1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBhbmdsZSA9IChpICogTWF0aC5QSSAqIDIpIC8gMTJcbiAgICAgICAgICBjb25zdCBkaXN0YW5jZSA9IGV4cGxvc2lvblNpemUgKiAxLjVcbiAgICAgICAgICBjb25zdCB4ID0gY2VudGVyWCArIE1hdGguY29zKGFuZ2xlKSAqIGRpc3RhbmNlXG4gICAgICAgICAgY29uc3QgeSA9IGNlbnRlclkgKyBNYXRoLnNpbihhbmdsZSkgKiBkaXN0YW5jZVxuXG4gICAgICAgICAgY3R4LmJlZ2luUGF0aCgpXG4gICAgICAgICAgY3R4LmFyYyh4LCB5LCAyLCAwLCBNYXRoLlBJICogMilcbiAgICAgICAgICBjdHguZmlsbCgpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY3R4LmZpbGxTdHlsZSA9ICcjMDAwJ1xuICAgICAgY3R4LmZvbnQgPSBgYm9sZCAke01hdGgubWF4KDE2LCAyNCAqIHNjYWxlKX1weCBBcmlhbGBcbiAgICAgIGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJ1xuICAgICAgY3R4LmZpbGxUZXh0KGBTY29yZTogJHtjdXJyZW50U3RhdGUuc2NvcmV9YCwgQkFTRV9XSURUSCAvIDIsIDQwKVxuXG4gICAgICBpZiAoIWN1cnJlbnRTdGF0ZS5nYW1lU3RhcnRlZCAmJiAhY3VycmVudFN0YXRlLmdhbWVPdmVyKSB7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSAncmdiYSgwLCAwLCAwLCAwLjcpJ1xuICAgICAgICBjdHguZmlsbFJlY3QoMCwgMCwgQkFTRV9XSURUSCwgQkFTRV9IRUlHSFQpXG5cbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICcjRkZGJ1xuICAgICAgICBjdHguZm9udCA9IGBib2xkICR7TWF0aC5tYXgoMjAsIDMyICogc2NhbGUpfXB4IEFyaWFsYFxuICAgICAgICBjdHguZmlsbFRleHQoJ0JlYWNoIFZvbGxleWJhbGwnLCBCQVNFX1dJRFRIIC8gMiwgQkFTRV9IRUlHSFQgLyAyIC0gNTApXG5cbiAgICAgICAgY3R4LmZvbnQgPSBgJHtNYXRoLm1heCgxNCwgMTggKiBzY2FsZSl9cHggQXJpYWxgXG4gICAgICAgIGN0eC5maWxsVGV4dCgnVGFwIHRvIEJvdW5jZSEnLCBCQVNFX1dJRFRIIC8gMiwgQkFTRV9IRUlHSFQgLyAyICsgMjApXG5cbiAgICAgICAgY3R4LmZvbnQgPSBgJHtNYXRoLm1heCgxMCwgMTQgKiBzY2FsZSl9cHggQXJpYWxgXG4gICAgICAgIGN0eC5maWxsVGV4dCgnRGVza3RvcDogU3BhY2Ugb3Ig4oaRIEFycm93IHwgTW9iaWxlOiBUYXAnLCBCQVNFX1dJRFRIIC8gMiwgQkFTRV9IRUlHSFQgLyAyICsgNjApXG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50U3RhdGUuZ2FtZU92ZXIpIHtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICdyZ2JhKDI1NSwgMCwgMCwgMC43KSdcbiAgICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIEJBU0VfV0lEVEgsIEJBU0VfSEVJR0hUKVxuXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSAnI0ZGRidcbiAgICAgICAgY3R4LmZvbnQgPSBgYm9sZCAke01hdGgubWF4KDIwLCAzMiAqIHNjYWxlKX1weCBBcmlhbGBcbiAgICAgICAgY3R4LmZpbGxUZXh0KCdHYW1lIE92ZXInLCBCQVNFX1dJRFRIIC8gMiwgQkFTRV9IRUlHSFQgLyAyIC0gNTApXG5cbiAgICAgICAgY3R4LmZvbnQgPSBgJHtNYXRoLm1heCgxNCwgMTggKiBzY2FsZSl9cHggQXJpYWxgXG4gICAgICAgIGN0eC5maWxsVGV4dChgRmluYWwgU2NvcmU6ICR7Y3VycmVudFN0YXRlLnNjb3JlfWAsIEJBU0VfV0lEVEggLyAyLCBCQVNFX0hFSUdIVCAvIDIpXG4gICAgICAgIGN0eC5maWxsVGV4dCgnVGFwIHRvIFBsYXkgQWdhaW4nLCBCQVNFX1dJRFRIIC8gMiwgQkFTRV9IRUlHSFQgLyAyICsgMzApXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjdXJyZW50U3RhdGVcbiAgICB9KVxuICB9XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBhbmltYXRlID0gKCkgPT4ge1xuICAgICAgZ2FtZUxvb3AoKVxuICAgICAgZHJhdygpXG4gICAgICBhbmltYXRpb25SZWYuY3VycmVudCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKVxuICAgIH1cblxuICAgIGFuaW1hdGlvblJlZi5jdXJyZW50ID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpXG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKGFuaW1hdGlvblJlZi5jdXJyZW50KSB7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGFuaW1hdGlvblJlZi5jdXJyZW50KVxuICAgICAgfVxuICAgIH1cbiAgfSwgW10pXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVLZXlQcmVzcyA9IChlOiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICBpZiAoZS5jb2RlID09PSAnU3BhY2UnIHx8IGUuY29kZSA9PT0gJ0Fycm93VXAnKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICBqdW1wKClcbiAgICAgIH1cbiAgICB9XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleVByZXNzKVxuICAgIHJldHVybiAoKSA9PiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleVByZXNzKVxuICB9LCBbanVtcF0pXG5cbiAgY29uc3QgaGFuZGxlVG91Y2ggPSAoZTogUmVhY3QuVG91Y2hFdmVudCkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGp1bXAoKVxuICB9XG5cbiAgY29uc3QgaGFuZGxlQ2xpY2sgPSAoZTogUmVhY3QuTW91c2VFdmVudCkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGp1bXAoKVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIG1pbi1oLXNjcmVlbiB3LWZ1bGwgcC0xIHNtOnAtMlwiPlxuICAgICAgPGNhbnZhc1xuICAgICAgICByZWY9e2NhbnZhc1JlZn1cbiAgICAgICAgd2lkdGg9e0JBU0VfV0lEVEh9XG4gICAgICAgIGhlaWdodD17QkFTRV9IRUlHSFR9XG4gICAgICAgIGNsYXNzTmFtZT1cImJvcmRlciBib3JkZXItd2hpdGUgc206Ym9yZGVyLTIgcm91bmRlZC1tZCBzbTpyb3VuZGVkLWxnIHNoYWRvdy14bCBzbTpzaGFkb3ctMnhsIGN1cnNvci1wb2ludGVyIHNlbGVjdC1ub25lXCJcbiAgICAgICAgb25Ub3VjaFN0YXJ0PXtoYW5kbGVUb3VjaH1cbiAgICAgICAgb25DbGljaz17aGFuZGxlQ2xpY2t9XG4gICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgdG91Y2hBY3Rpb246ICdub25lJyxcbiAgICAgICAgICB3aWR0aDogYCR7Y2FudmFzU2l6ZS53aWR0aH1weGAsXG4gICAgICAgICAgaGVpZ2h0OiBgJHtjYW52YXNTaXplLmhlaWdodH1weGAsXG4gICAgICAgICAgbWF4V2lkdGg6ICcxMDB2dycsXG4gICAgICAgICAgbWF4SGVpZ2h0OiAnY2FsYygxMDB2aCAtIDIwcHgpJ1xuICAgICAgICB9fVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKVxufSJdLCJuYW1lcyI6WyJ1c2VFZmZlY3QiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsInVzZUNhbGxiYWNrIiwiQkFTRV9XSURUSCIsIkJBU0VfSEVJR0hUIiwiQklSRF9TSVpFIiwiUElQRV9XSURUSCIsIlBJUEVfR0FQIiwiR1JBVklUWSIsIkpVTVBfRk9SQ0UiLCJQSVBFX1NQRUVEIiwiRmxhcHB5QmlyZEdhbWUiLCJjYW52YXNSZWYiLCJhbmltYXRpb25SZWYiLCJjYW52YXNTaXplIiwic2V0Q2FudmFzU2l6ZSIsIndpZHRoIiwiaGVpZ2h0Iiwic2NhbGUiLCJzZXRTY2FsZSIsInVwZGF0ZUNhbnZhc1NpemUiLCJzY3JlZW5XaWR0aCIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJzY3JlZW5IZWlnaHQiLCJpbm5lckhlaWdodCIsInNjYWxlWCIsInNjYWxlWSIsIm5ld1NjYWxlIiwiTWF0aCIsIm1pbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZ2FtZVN0YXRlIiwic2V0R2FtZVN0YXRlIiwiYmlyZCIsIngiLCJ5IiwidmVsb2NpdHkiLCJyYWRpdXMiLCJwaXBlcyIsInNjb3JlIiwiZ2FtZVN0YXJ0ZWQiLCJnYW1lT3ZlciIsImV4cGxvc2lvbiIsImFjdGl2ZSIsImZyYW1lIiwicmVzZXRHYW1lIiwianVtcCIsInByZXYiLCJjcmVhdGVQaXBlIiwiZ2FwWSIsInJhbmRvbSIsImdhcEhlaWdodCIsInBhc3NlZCIsImNoZWNrQ29sbGlzaW9uIiwicGlwZSIsImdhbWVMb29wIiwibmV3QmlyZCIsIm5ld1BpcGVzIiwibmV3U2NvcmUiLCJtYXAiLCJmb3JFYWNoIiwiZmlsdGVyIiwibGVuZ3RoIiwicHVzaCIsImNvbGxpc2lvbiIsIm5ld0V4cGxvc2lvbiIsImRyYXciLCJjYW52YXMiLCJjdXJyZW50IiwiY3R4IiwiZ2V0Q29udGV4dCIsImN1cnJlbnRTdGF0ZSIsImNsZWFyUmVjdCIsInNreUdyYWRpZW50IiwiY3JlYXRlTGluZWFyR3JhZGllbnQiLCJhZGRDb2xvclN0b3AiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsImkiLCJiZWdpblBhdGgiLCJhcmMiLCJQSSIsImZpbGwiLCJib3R0b21IZWlnaHQiLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsInNwaW5lWCIsIm1vdmVUbyIsImxpbmVUbyIsInN0cm9rZSIsInN0cm9rZVJlY3QiLCJjZW50ZXJYIiwiY2VudGVyWSIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsImNsb3NlUGF0aCIsImFuZ2xlIiwiY29zIiwic2luIiwiZXhwbG9zaW9uU2l6ZSIsImRpc3RhbmNlIiwibWF4IiwiZm9udCIsInRleHRBbGlnbiIsImZpbGxUZXh0IiwiYW5pbWF0ZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiaGFuZGxlS2V5UHJlc3MiLCJlIiwiY29kZSIsInByZXZlbnREZWZhdWx0IiwiaGFuZGxlVG91Y2giLCJoYW5kbGVDbGljayIsImRpdiIsImNsYXNzTmFtZSIsInJlZiIsIm9uVG91Y2hTdGFydCIsIm9uQ2xpY2siLCJzdHlsZSIsInRvdWNoQWN0aW9uIiwibWF4V2lkdGgiLCJtYXhIZWlnaHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/FlappyBirdGame.tsx\n"));

/***/ })

});