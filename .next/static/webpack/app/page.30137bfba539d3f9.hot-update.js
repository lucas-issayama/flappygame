"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/FlappyBirdGame.tsx":
/*!*******************************************!*\
  !*** ./src/components/FlappyBirdGame.tsx ***!
  \*******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ FlappyBirdGame; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\nconst CANVAS_WIDTH = 400;\nconst CANVAS_HEIGHT = 600;\nconst BIRD_SIZE = 20;\nconst PIPE_WIDTH = 60;\nconst PIPE_GAP = 150;\nconst GRAVITY = 0.3;\nconst JUMP_FORCE = -7;\nconst PIPE_SPEED = 2;\nfunction FlappyBirdGame() {\n    _s();\n    const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const animationRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    const [gameState, setGameState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        bird: {\n            x: CANVAS_WIDTH / 4,\n            y: CANVAS_HEIGHT / 2,\n            velocity: 0,\n            radius: BIRD_SIZE / 2\n        },\n        pipes: [],\n        score: 0,\n        gameStarted: false,\n        gameOver: false,\n        explosion: {\n            active: false,\n            x: 0,\n            y: 0,\n            frame: 0\n        }\n    });\n    const resetGame = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        setGameState({\n            bird: {\n                x: CANVAS_WIDTH / 4,\n                y: CANVAS_HEIGHT / 2,\n                velocity: 0,\n                radius: BIRD_SIZE / 2\n            },\n            pipes: [],\n            score: 0,\n            gameStarted: false,\n            gameOver: false,\n            explosion: {\n                active: false,\n                x: 0,\n                y: 0,\n                frame: 0\n            }\n        });\n    }, []);\n    const jump = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (!gameState.gameStarted && !gameState.gameOver) {\n            setGameState((prev)=>({\n                    ...prev,\n                    gameStarted: true,\n                    bird: {\n                        ...prev.bird,\n                        velocity: JUMP_FORCE\n                    }\n                }));\n        } else if (gameState.gameStarted && !gameState.gameOver) {\n            setGameState((prev)=>({\n                    ...prev,\n                    bird: {\n                        ...prev.bird,\n                        velocity: JUMP_FORCE\n                    }\n                }));\n        } else if (gameState.gameOver) {\n            resetGame();\n        }\n    }, [\n        gameState.gameStarted,\n        gameState.gameOver,\n        resetGame\n    ]);\n    const createPipe = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((x)=>{\n        const gapY = Math.random() * (CANVAS_HEIGHT - PIPE_GAP - 100) + 50;\n        return {\n            x,\n            width: PIPE_WIDTH,\n            gapY,\n            gapHeight: PIPE_GAP,\n            passed: false\n        };\n    }, []);\n    const checkCollision = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((bird, pipes)=>{\n        if (bird.y - bird.radius <= 0 || bird.y + bird.radius >= CANVAS_HEIGHT) {\n            return true;\n        }\n        for (const pipe of pipes){\n            if (bird.x + bird.radius > pipe.x && bird.x - bird.radius < pipe.x + pipe.width && (bird.y - bird.radius < pipe.gapY || bird.y + bird.radius > pipe.gapY + pipe.gapHeight)) {\n                return true;\n            }\n        }\n        return false;\n    }, []);\n    const gameLoop = ()=>{\n        setGameState((prev)=>{\n            if (prev.gameOver) return prev;\n            const newBird = {\n                ...prev.bird\n            };\n            let newPipes = [\n                ...prev.pipes\n            ];\n            let newScore = prev.score;\n            // Only apply physics when game is started\n            if (prev.gameStarted) {\n                newBird.velocity += GRAVITY;\n                newBird.y += newBird.velocity;\n                // Only move pipes when game is started\n                newPipes = newPipes.map((pipe)=>({\n                        ...pipe,\n                        x: pipe.x - PIPE_SPEED\n                    }));\n                newPipes.forEach((pipe)=>{\n                    if (!pipe.passed && newBird.x > pipe.x + pipe.width) {\n                        pipe.passed = true;\n                        newScore += 1;\n                    }\n                });\n                newPipes = newPipes.filter((pipe)=>pipe.x + pipe.width > 0);\n                if (newPipes.length === 0) {\n                    const gapY = Math.random() * (CANVAS_HEIGHT - PIPE_GAP - 100) + 50;\n                    newPipes.push({\n                        x: CANVAS_WIDTH + 150,\n                        width: PIPE_WIDTH,\n                        gapY,\n                        gapHeight: PIPE_GAP,\n                        passed: false\n                    });\n                } else if (newPipes[newPipes.length - 1].x < CANVAS_WIDTH - 200) {\n                    const gapY = Math.random() * (CANVAS_HEIGHT - PIPE_GAP - 100) + 50;\n                    newPipes.push({\n                        x: CANVAS_WIDTH,\n                        width: PIPE_WIDTH,\n                        gapY,\n                        gapHeight: PIPE_GAP,\n                        passed: false\n                    });\n                }\n            }\n            // Check collision\n            let collision = false;\n            let newExplosion = {\n                ...prev.explosion\n            };\n            if (prev.gameStarted) {\n                if (newBird.y - newBird.radius <= 0 || newBird.y + newBird.radius >= CANVAS_HEIGHT) {\n                    collision = true;\n                    newExplosion = {\n                        active: true,\n                        x: newBird.x,\n                        y: newBird.y,\n                        frame: 0\n                    };\n                }\n                for (const pipe of newPipes){\n                    if (newBird.x + newBird.radius > pipe.x && newBird.x - newBird.radius < pipe.x + pipe.width && (newBird.y - newBird.radius < pipe.gapY || newBird.y + newBird.radius > pipe.gapY + pipe.gapHeight)) {\n                        collision = true;\n                        newExplosion = {\n                            active: true,\n                            x: newBird.x,\n                            y: newBird.y,\n                            frame: 0\n                        };\n                        break;\n                    }\n                }\n            }\n            // Update explosion animation\n            if (newExplosion.active) {\n                newExplosion.frame += 1;\n                if (newExplosion.frame > 30) {\n                    newExplosion.active = false;\n                }\n            }\n            return {\n                ...prev,\n                bird: newBird,\n                pipes: newPipes,\n                score: newScore,\n                gameOver: collision,\n                explosion: newExplosion\n            };\n        });\n    };\n    const draw = ()=>{\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) return;\n        setGameState((currentState)=>{\n            ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n            // Beach sky gradient\n            const skyGradient = ctx.createLinearGradient(0, 0, 0, CANVAS_HEIGHT * 0.7);\n            skyGradient.addColorStop(0, \"#87CEEB\");\n            skyGradient.addColorStop(0.5, \"#ADD8E6\");\n            skyGradient.addColorStop(1, \"#F0E68C\");\n            ctx.fillStyle = skyGradient;\n            ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT * 0.7);\n            // Beach sand\n            ctx.fillStyle = \"#F4A460\";\n            ctx.fillRect(0, CANVAS_HEIGHT * 0.7, CANVAS_WIDTH, CANVAS_HEIGHT * 0.3);\n            // Add some texture to sand with dots\n            ctx.fillStyle = \"#DEB887\";\n            for(let i = 0; i < 50; i++){\n                const x = Math.random() * CANVAS_WIDTH;\n                const y = CANVAS_HEIGHT * 0.7 + Math.random() * CANVAS_HEIGHT * 0.3;\n                ctx.beginPath();\n                ctx.arc(x, y, 1, 0, Math.PI * 2);\n                ctx.fill();\n            }\n            currentState.pipes.forEach((pipe)=>{\n                // Draw cactus top part\n                ctx.fillStyle = \"#228B22\";\n                ctx.fillRect(pipe.x + pipe.width * 0.2, 0, pipe.width * 0.6, pipe.gapY);\n                // Cactus arms (top)\n                if (pipe.gapY > 100) {\n                    ctx.fillRect(pipe.x, pipe.gapY * 0.3, pipe.width * 0.3, pipe.width * 0.2);\n                    ctx.fillRect(pipe.x + pipe.width * 0.7, pipe.gapY * 0.6, pipe.width * 0.3, pipe.width * 0.2);\n                }\n                // Draw cactus bottom part\n                ctx.fillRect(pipe.x + pipe.width * 0.2, pipe.gapY + pipe.gapHeight, pipe.width * 0.6, CANVAS_HEIGHT - pipe.gapY - pipe.gapHeight);\n                // Cactus arms (bottom)\n                if (CANVAS_HEIGHT - pipe.gapY - pipe.gapHeight > 100) {\n                    const bottomHeight = CANVAS_HEIGHT - pipe.gapY - pipe.gapHeight;\n                    ctx.fillRect(pipe.x, pipe.gapY + pipe.gapHeight + bottomHeight * 0.2, pipe.width * 0.3, pipe.width * 0.2);\n                    ctx.fillRect(pipe.x + pipe.width * 0.7, pipe.gapY + pipe.gapHeight + bottomHeight * 0.5, pipe.width * 0.3, pipe.width * 0.2);\n                }\n                // Add cactus spines\n                ctx.strokeStyle = \"#006400\";\n                ctx.lineWidth = 1;\n                // Vertical spines on main body\n                for(let i = 0; i < 3; i++){\n                    const spineX = pipe.x + pipe.width * 0.3 + i * pipe.width * 0.15;\n                    // Top cactus spines\n                    ctx.beginPath();\n                    ctx.moveTo(spineX, 10);\n                    ctx.lineTo(spineX, pipe.gapY - 10);\n                    ctx.stroke();\n                    // Bottom cactus spines\n                    ctx.beginPath();\n                    ctx.moveTo(spineX, pipe.gapY + pipe.gapHeight + 10);\n                    ctx.lineTo(spineX, CANVAS_HEIGHT - 10);\n                    ctx.stroke();\n                }\n                // Cactus outline\n                ctx.strokeStyle = \"#006400\";\n                ctx.lineWidth = 2;\n                ctx.strokeRect(pipe.x + pipe.width * 0.2, 0, pipe.width * 0.6, pipe.gapY);\n                ctx.strokeRect(pipe.x + pipe.width * 0.2, pipe.gapY + pipe.gapHeight, pipe.width * 0.6, CANVAS_HEIGHT - pipe.gapY - pipe.gapHeight);\n            });\n            // Draw volleyball with segments\n            const centerX = currentState.bird.x;\n            const centerY = currentState.bird.y;\n            const radius = currentState.bird.radius;\n            // Create volleyball segments (6 segments total)\n            for(let i = 0; i < 6; i++){\n                const startAngle = i * Math.PI / 3;\n                const endAngle = (i + 1) * Math.PI / 3;\n                ctx.beginPath();\n                ctx.moveTo(centerX, centerY);\n                ctx.arc(centerX, centerY, radius, startAngle, endAngle);\n                ctx.closePath();\n                // Alternate between yellow and blue segments\n                if (i % 2 === 0) {\n                    ctx.fillStyle = \"#FFD700\" // Gold/Yellow\n                    ;\n                } else {\n                    ctx.fillStyle = \"#1E90FF\" // Dodger Blue\n                    ;\n                }\n                ctx.fill();\n                // Add segment border\n                ctx.strokeStyle = \"#333333\";\n                ctx.lineWidth = 1;\n                ctx.stroke();\n            }\n            // Add the characteristic volleyball lines\n            ctx.strokeStyle = \"#333333\";\n            ctx.lineWidth = 2;\n            // Three curved lines dividing the segments\n            for(let i = 0; i < 3; i++){\n                const angle = i * Math.PI / 3;\n                ctx.beginPath();\n                ctx.moveTo(centerX + Math.cos(angle) * radius, centerY + Math.sin(angle) * radius);\n                ctx.lineTo(centerX - Math.cos(angle) * radius, centerY - Math.sin(angle) * radius);\n                ctx.stroke();\n            }\n            // Outer border\n            ctx.strokeStyle = \"#333333\";\n            ctx.lineWidth = 2;\n            ctx.beginPath();\n            ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n            ctx.stroke();\n            ctx.fillStyle = \"#000\";\n            ctx.font = \"bold 24px Arial\";\n            ctx.textAlign = \"center\";\n            ctx.fillText(\"Score: \".concat(currentState.score), CANVAS_WIDTH / 2, 40);\n            if (!currentState.gameStarted && !currentState.gameOver) {\n                ctx.fillStyle = \"rgba(0, 0, 0, 0.7)\";\n                ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n                ctx.fillStyle = \"#FFF\";\n                ctx.font = \"bold 32px Arial\";\n                ctx.fillText(\"Beach Volleyball\", CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2 - 50);\n                ctx.font = \"18px Arial\";\n                ctx.fillText(\"Tap to Bounce!\", CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2 + 20);\n                ctx.font = \"14px Arial\";\n                ctx.fillText(\"Desktop: Space or ↑ Arrow | Mobile: Tap\", CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2 + 60);\n            }\n            if (currentState.gameOver) {\n                ctx.fillStyle = \"rgba(255, 0, 0, 0.7)\";\n                ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n                ctx.fillStyle = \"#FFF\";\n                ctx.font = \"bold 32px Arial\";\n                ctx.fillText(\"Game Over\", CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2 - 50);\n                ctx.font = \"18px Arial\";\n                ctx.fillText(\"Final Score: \".concat(currentState.score), CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2);\n                ctx.fillText(\"Tap to Play Again\", CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2 + 30);\n            }\n            return currentState;\n        });\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const animate = ()=>{\n            gameLoop();\n            draw();\n            animationRef.current = requestAnimationFrame(animate);\n        };\n        animationRef.current = requestAnimationFrame(animate);\n        return ()=>{\n            if (animationRef.current) {\n                cancelAnimationFrame(animationRef.current);\n            }\n        };\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const handleKeyPress = (e)=>{\n            if (e.code === \"Space\" || e.code === \"ArrowUp\") {\n                e.preventDefault();\n                jump();\n            }\n        };\n        window.addEventListener(\"keydown\", handleKeyPress);\n        return ()=>window.removeEventListener(\"keydown\", handleKeyPress);\n    }, [\n        jump\n    ]);\n    const handleTouch = (e)=>{\n        e.preventDefault();\n        jump();\n    };\n    const handleClick = (e)=>{\n        e.preventDefault();\n        jump();\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex flex-col items-center justify-center min-h-screen w-full p-2\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"canvas\", {\n            ref: canvasRef,\n            width: CANVAS_WIDTH,\n            height: CANVAS_HEIGHT,\n            className: \"border-2 border-white rounded-lg shadow-2xl cursor-pointer select-none\",\n            onTouchStart: handleTouch,\n            onClick: handleClick,\n            style: {\n                touchAction: \"none\",\n                maxWidth: \"100vw\",\n                maxHeight: \"100vh\"\n            }\n        }, void 0, false, {\n            fileName: \"/Users/lucasissayama/dev/claude-game/src/components/FlappyBirdGame.tsx\",\n            lineNumber: 444,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/lucasissayama/dev/claude-game/src/components/FlappyBirdGame.tsx\",\n        lineNumber: 443,\n        columnNumber: 5\n    }, this);\n}\n_s(FlappyBirdGame, \"9T059vsZWTqWpd7jxpBuMSFWdek=\");\n_c = FlappyBirdGame;\nvar _c;\n$RefreshReg$(_c, \"FlappyBirdGame\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/FlappyBirdGame.tsx\n"));

/***/ })

});